


// I am thinking about create an empty result, only to indicate the order of nodes process?
// here this node is modifying two data simultaneously, particles, and velocity grid. which are all global data pointers
// I want this node to return an empty result(such as int 0), only to provide a connection to a next node. 
            // oh isee, you're tring to return a 'int', which is not an zeno::IObject now
            // we currently only have Matrix, Mesh, Particles as IObject
            // primitive types like int, can only be parameters (by get_param) now
            // should I add them? I 
            //yes please, ok, we shall be able to return a defalut Int, only serve as a way to provide a node connection.
            //so, this 'int' is not really necessary 'int', but just a dummy socket? we don't need 'float' and 'vec3' by this mean?right
            //oh then we'd better add DummyObject instead of IntObject (does the int value matter here?) doesn't at all! I see
            //then, by default, all nodes shall also accept dummyObject as input to indicate its predicessor (by predicessor you mean the order of exec)right
            //so let's add an input called "ConnectDummy" like this (see below)

        // and, I guess, you proberly want to add dummy output to all nodes too?not sure, do we support multiply outputs now?
    // yes, at least in the editor UI, Ok then add this
    
// add this to nodes that want to accept dummy (want this automatically added to all nodes?)yes, although this is optional, but just let every node have this feature


//by the way, did you and dilei prefer 4 tabs than 2 tabs? I happened to have adapt it in taichi's code style in my vimrc..
//i think you're leaving this computer... btw, 48 cpu cores compiling c++ is really fast! i like this computer

// oh i see, like this? right
// hi, i'm going to have dinner & shower now, please go ahead in other stuffs, see you! see you later


// accept this format? cause StringValue doesn't have min and max...
      // we may also need to think about Float3Value, which contains 3 min and max, will they have same domain?
      // format like X Y Z MIN MAX or X Y Z XMIN YMIN ZMIN XMAX YMAX ZMAX
      // anyway, we shouldn't add more fields to ParamDescriptor to adapt different value types..
      // go for shower now, see you

      //why using static funcs? 
//imagine the scenario where we need to use an advection node on some data, without actually defining a FLIPObject. 
//why not define a flipobject? we may use singleton for it, 
// Advector shall be a general purpose advection solver, which applies on particle+grid, not particularly a FLIP domain.
//let's then add advector to a separate class, instead of in FLIP_vdb
//FLIP_vdb is not visible to anybody, we can put it here, the advector node just call the API. so we need it to be static, aha, awful design of flip_vdb.
//we should always make cpp classes available in headers, isnt it? instead of mock up.with static funcs
//yes you are right, let's be lazy for now....
//actually, we shall keep everything in FLIP_vdb and eventually everything in FLIP_vdb will be static, 
//so FLIP_vdb is more like a toolbox, not a class.  <--- how do you think about this.
//so it only have static funcs, no static variables? sounds like require everything to be passed as args.
//eventually if we find the args of some funcs are common. we'll wrap them into a class, snd then become non-static again..
//e.g. FLIP_vdb is a wrapper of particles, sdfs, velocities, etc.
//diff is only about a trade off convinence and portability:
//passing args with 'this' pointer - you have to carry the unused members as well.
//passing args one by one - hard to.maintain but more like  flex&portable toolbox.
//here are my thoughts:
//each node, shall have inputs with none-class related type, for example:
//P2G_Advect(dt, dx, particles, velocityFields, postVelFields, )
//and class related params, thus
//P2G_Advect(dt, dx, particles, velFields, postVelFields, SolverParams)
//a FLIP domain, may have shared params in SolverParams, while P2G_Advect() can be as general as possible, in case SolverParams is not provided.
//if we have P2G and G2P, both have dt, dx as params. i think users wont be happy maintian two of them to be same...
//In Houdini, they do so, and there is a feature : duplicate_from(""), as a result, the parameter provided to one node can be chosen to duplicate
//from another node, so they always synchronized. cool feature! will we use this as a solution? how to represent it in gui is a problem.. leaving for now, culater~
//we can use $parameter_name$ to represent a duplicated parameter. <-- sounds like a global parameter?
//so, if the $parameter_name$ is an global, we need to limit its 'useable scope', otherwise we can only use one solver in a graph..
//maybe need support grouping nodes that share the same $ global scope? e.g. group FLIP solver nodes together, group cloth solver nodes together,
//so that they can have different $DT$ and $DX$. then the values of $DT$ and $DX$, or $other_name$, can be set in the ui of the group.

//by the way currently we support using `/tmp/{frame:06d}.obj` in str params to load a mesh sequence (e.g. `/tmp/000233.obj` at frame 233)
//thanks the f-string syntax of Python 3.6+.

// also found the the stupid `TBB::tbbmalloc_proxy` package caused `free(): invalid size`. I removed it from FLIP_vdb.cpp, hope it doesn't break
// the solver. UPDATE: PUBLIC -> PRIVATE seems fixed the problem without removing tbbmalloc...
// UPDATE: No, it didn't work on this machine, it only work on my machine (why?)